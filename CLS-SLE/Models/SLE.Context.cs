//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CLS_SLE.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SLE_DB_ : DbContext
    {
        public SLE_DB_()
            : base("name=SLE_DB_")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Assessment> Assessments { get; set; }
        public virtual DbSet<AssessmentLevel> AssessmentLevels { get; set; }
        public virtual DbSet<AssessmentRubric> AssessmentRubrics { get; set; }
        public virtual DbSet<AssessmentStatu> AssessmentStatus { get; set; }
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseProgram> CoursePrograms { get; set; }
        public virtual DbSet<Criterion> Criteria { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Enrollment> Enrollments { get; set; }
        public virtual DbSet<EnrollmentStatu> EnrollmentStatus { get; set; }
        public virtual DbSet<Outcome> Outcomes { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Program> Programs { get; set; }
        public virtual DbSet<ProgramDepartment> ProgramDepartments { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<ScoreType> ScoreTypes { get; set; }
        public virtual DbSet<Section> Sections { get; set; }
        public virtual DbSet<SectionRubric> SectionRubrics { get; set; }
        public virtual DbSet<Semester> Semesters { get; set; }
        public virtual DbSet<StudentProgram> StudentPrograms { get; set; }
        public virtual DbSet<StudentScore> StudentScores { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<InstructorAssessment> InstructorAssessments { get; set; }
        public virtual DbSet<RubricDetail> RubricDetails { get; set; }
        public virtual DbSet<SectionEnrollment> SectionEnrollments { get; set; }
    
        [DbFunction("SLE_DB_", "GetCompletedCountBySectionRubric")]
        public virtual IQueryable<GetCompletedCountBySectionRubric_Result> GetCompletedCountBySectionRubric(Nullable<int> sectionRubricID)
        {
            var sectionRubricIDParameter = sectionRubricID.HasValue ?
                new ObjectParameter("SectionRubricID", sectionRubricID) :
                new ObjectParameter("SectionRubricID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCompletedCountBySectionRubric_Result>("[SLE_DB_].[GetCompletedCountBySectionRubric](@SectionRubricID)", sectionRubricIDParameter);
        }
    }
}
