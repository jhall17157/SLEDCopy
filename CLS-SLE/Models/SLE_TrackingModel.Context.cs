

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace CLS_SLE.Models
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class SLE_TrackingEntities : DbContext
{
    public SLE_TrackingEntities()
        : base("name=SLE_TrackingEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Assessment> Assessments { get; set; }

    public virtual DbSet<AssessmentCategory> AssessmentCategories { get; set; }

    public virtual DbSet<AssessmentLevel> AssessmentLevels { get; set; }

    public virtual DbSet<AssessmentRubric> AssessmentRubrics { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<CourseProgram> CoursePrograms { get; set; }

    public virtual DbSet<Criterion> Criteria { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<DepartmentSecurity> DepartmentSecurities { get; set; }

    public virtual DbSet<Enrollment> Enrollments { get; set; }

    public virtual DbSet<EnrollmentStatu> EnrollmentStatus { get; set; }

    public virtual DbSet<ETL_StatusMapping> ETL_StatusMapping { get; set; }

    public virtual DbSet<Outcome> Outcomes { get; set; }

    public virtual DbSet<Person> People { get; set; }

    public virtual DbSet<Program> Programs { get; set; }

    public virtual DbSet<ProgramAssessmentMapping> ProgramAssessmentMappings { get; set; }

    public virtual DbSet<ProgramDepartment> ProgramDepartments { get; set; }

    public virtual DbSet<ProgramSecurity> ProgramSecurities { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<School> Schools { get; set; }

    public virtual DbSet<SchoolSecurity> SchoolSecurities { get; set; }

    public virtual DbSet<Score> Scores { get; set; }

    public virtual DbSet<ScoreSet> ScoreSets { get; set; }

    public virtual DbSet<ScoreType> ScoreTypes { get; set; }

    public virtual DbSet<Section> Sections { get; set; }

    public virtual DbSet<SectionRubric> SectionRubrics { get; set; }

    public virtual DbSet<Semester> Semesters { get; set; }

    public virtual DbSet<StudentProgram> StudentPrograms { get; set; }

    public virtual DbSet<StudentScore> StudentScores { get; set; }

    public virtual DbSet<sysdiagram> sysdiagrams { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserRole> UserRoles { get; set; }

    public virtual DbSet<InstructorAssessment> InstructorAssessments { get; set; }

    public virtual DbSet<RubricDetail> RubricDetails { get; set; }

    public virtual DbSet<SectionEnrollment> SectionEnrollments { get; set; }

    public virtual DbSet<SemesterDate> SemesterDates { get; set; }

    public virtual DbSet<StudentScoreCount> StudentScoreCounts { get; set; }


    [DbFunction("SLE_TrackingEntities", "GetCompletedCountBySectionRubric")]
    public virtual IQueryable<GetCompletedCountBySectionRubric_Result> GetCompletedCountBySectionRubric(Nullable<int> sectionRubricID)
    {

        var sectionRubricIDParameter = sectionRubricID.HasValue ?
            new ObjectParameter("SectionRubricID", sectionRubricID) :
            new ObjectParameter("SectionRubricID", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCompletedCountBySectionRubric_Result>("[SLE_TrackingEntities].[GetCompletedCountBySectionRubric](@SectionRubricID)", sectionRubricIDParameter);
    }


    public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
    }


    public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var new_diagramnameParameter = new_diagramname != null ?
            new ObjectParameter("new_diagramname", new_diagramname) :
            new ObjectParameter("new_diagramname", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
    }


    [DbFunction("SLE_TrackingEntities", "Split")]
    public virtual IQueryable<Split_Result> Split(string @string, string delimiter)
    {

        var stringParameter = @string != null ?
            new ObjectParameter("String", @string) :
            new ObjectParameter("String", typeof(string));


        var delimiterParameter = delimiter != null ?
            new ObjectParameter("Delimiter", delimiter) :
            new ObjectParameter("Delimiter", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[SLE_TrackingEntities].[Split](@String, @Delimiter)", stringParameter, delimiterParameter);
    }

}

}

